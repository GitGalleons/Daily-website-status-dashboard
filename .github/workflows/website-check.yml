name: Daily Website Status Check

# Runs daily at 05:00 AM (UTC+6) -> schedule at 23:00 UTC previous day
on:
  schedule:
    - cron: '0 23 * * *' # 23:00 UTC -> 05:00 AM (UTC+6)
  workflow_dispatch: # allow manual trigger

permissions:
  contents: write

jobs:
  check-websites:
    name: Check websites and publish report
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (allow push)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Ensure reports directory exists
        run: mkdir -p reports

      - name: Run website checks
        run: |
          node --version
          node scripts/check_sites.js

      - name: Commit and push updated report (safe)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          TIMESTAMP="$(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          git config --global user.name "Deboraj-roy"
          git config --global user.email "deborajroy123@gmail.com"

          # Determine branch name (works for schedule and manual triggers)
          if [ -n "${GITHUB_REF:-}" ] && [[ "${GITHUB_REF}" == refs/heads/* ]]; then
            BRANCH="${GITHUB_REF#refs/heads/}"
          else
            BRANCH="${GITHUB_REF_NAME:-main}"
          fi
          echo "Target branch: $BRANCH"

          # Ensure pushing with token (safe even with persist-credentials)
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git"

          # Fetch remote refs (so rebase/pull has remote state)
          git fetch --no-tags origin +refs/heads/*:refs/remotes/origin/*

          # Stage generated files
          git add index.html style.css
          [ -d reports ] && git add reports/

          # If there are no changes staged, exit early
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          git commit -m "chore: update website status report (${TIMESTAMP})"

          # Attempt to rebase onto current remote HEAD to avoid non-fast-forward pushes
          set +e
          git pull --rebase --autostash origin "$BRANCH"
          PULL_EXIT=$?
          set -e

          if [ $PULL_EXIT -eq 0 ]; then
            # Good: rebase succeeded (or fast-forward). Push back to branch.
            git push origin "HEAD:${BRANCH}"
            echo "Pushed updated report to ${BRANCH}"
          else
            # Rebase failed (conflict or other). Abort and push to fallback branch to preserve generated report.
            git rebase --abort 2>/dev/null || true
            NEW_BRANCH="auto-update-$(date -u +%Y%m%d%H%M%S)"
            git branch -M "${NEW_BRANCH}"
            git push --set-upstream origin "${NEW_BRANCH}"
            echo "Rebase failed; pushed changes to fallback branch: ${NEW_BRANCH}"
            echo "Please inspect and merge manually."
          fi